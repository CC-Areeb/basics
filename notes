"Few Routing ways"


We can use prefixes to set the prefix of a route name and group all the routes that 
are starting with the same URL point inside that group as shown below

"
Route::prefix('/test')->group(function() {
    Route::get(/, [TestController::class, 'test_index']);
    Route::get(/blog, [TestController::class, 'test_create']);
    Route::get(/blog/{id}/edit, [TestController::class, 'test_edit']);
});
"

We can also use fallback routes so that when user are trying to access incorrect routes
they will always be redirected to either the home page or the dashboard or the login page
as shown below

"
Route::fallback(FallbackController::class);
"

you can also call in the function inside directly as well as shown below

"
Route::fallback('/login', function(){
    return view(login);
})
"

I chose to use the controller and inside the controller I have an invoke method 
as shown below

"
public function __invoke()
    {
        return view('welcome');
    }
"
The invoke method is a special function inside laravel which is used in single action
controllers.

You can generate an invokable controller by using the --invokable option

"
php artisan make:controller ProvisionServer --invokable
"


"Seeders"

Seeders are used to pass in correct data inside the database, the seeder file is made
when you create the migration throught the terminal and add the -s flag as seeder
the DatabaseSeeder is the main seed file that is used. The other seeder that we made will
only contain the data in an array and then it will passed in the DatabaseSeeder file inside
the run method "$this->call(TestSeeder::class);"

Next we need to loop the data and interact with the database system of laravel and for that 
we will use the Laravel Eloquent Model system instead of Query Builder as Eloquent makes it 
a bit easier to understand and write the queries using keywords like "create(), update(), delete()"
etc ...

We will be using the foreach loop as shown below

"
[
    'title' => 'Post one',
    'excerpt' => 'Summery of Post one',
    'body' => 'Body of Post one',
    'minutes_to_read' => 5,
    'image_path' => 'Empty',
    'is_published' => false,
]

foreach ($posts as $key => $value) {
    Post::create($value);
}   
"

Since we only want the values so we will only pass in the "$value" inside the create method.

Now inside the DatabaseSeeder file ----> inside the run method -----> we will call our 
"PostSeeder" by using the "this" global access keyword as shown below

"$this->call(PostSeeder::class);"


There are 2 ways to run seeders using the CLI/terminal.

1 - Running it with the migrations
"php artisan migrate --seed"

2 - Running it Seperatly
"php artisan db:seed"


"Model Factory"
When we are testing, we should not define each and every single rows like we did in seeders
instead we can use model factories that are used to insert dummy data one or more times.

Step 1 - Define a Factory class from the CLI
"php artisan make:factory TestFactory"

The factory you make will be inside the factory folder which is inside the database folder,
by default we have a defination method which will return an array as shown below

"
public function defination()
{
    return[
        //
    ];
}
"

NOTE :- Whenever we make a new laravel project, we get few things already made for us like
the User model, the users table with the fields, the user model factory with the data that
will be used inside the return array.

Since we define our operations inside the defination method, we will define our key value pairs
inside the return array as shown below

"
return [
    'key_1 => 'value_1',
    'key_2 => 'value_2',
];
"

The key name has to be exactly the same as the database field names that we have migrated,
the factory that I have made is shown below

"
return [
    'title' => 'Model factories',
    'excerpt' => 'Excerpt of our fist model factory',
    'body' => 'Body of our fist model factory',
    'minutes_to_read' => 5,
    'image_path' => 'Image Path',
    'is_published' => 1,
];
"

In this we are also defining static data like we did in seeders but the main difference is that we
can use faker instance for inserting different dummy data. Faker is a random data generator inside
laravel. Below is the example of the return array but instead using static data as shown above, we
will use the faker instance for generating data.


Some libraries we can use with faker (there are more)

"
random_int(0, 12300) ----> first number is the starting range and the second one is the ending range

Str::random(20) ------> any random string with lenght of 20

$faker->word ------> any random word

$faker->sentence -------> any random sentence

$faker->paragraph ---------> any random paragraph

$faker->randomFloat(2, 0, 10000) --------> any random float number starting from 0 till 10000 with 2 decimal places

$faker->image('public/storage/images',640,480, null, false), ------> fake image path with the dimensions like width and height

$faker->text(200) -----> random text with 200 characters

$faker->numberBetween(10, 500) --------> random number between 10 and 500, can be repeated

$faker->unique()->numberBetween(100, 500) --------> random number between 10 and 500, cannot be repeated

$faker->userName, -------> random person name

$faker -> sentence(4,true), ------> random 4 word sentence

"

More faker libraries inside the "vendor/fakerphp/faker/src/Faker/Generator.php" file


After defining our factory, we need to make sure that the data persists in the database so for that we 
we need to call in the Model and use the factory facade and this facade takes in a interger as its 
only parameter, this integer tells us how many dummy data we want to generate and insert in our table
inside the database. Also chain in the create() method in the end so that it can actually save the data
in the database.

"
TestMdoel::factory(5); --------> 5 is the number of data we need to generate for inserting in database
"

after this perform the database seeder command "php artisan db:seed"

We can also override a specific data generated by the factory by passing in an array and
defining a key value pair as shown below

"
Post::factory(20)->create([
    'body' => 'Overriding the body' -----> overriding the body text
]);
"