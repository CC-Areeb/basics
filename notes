"Few Routing ways"


We can use prefixes to set the prefix of a route name and group all the routes that 
are starting with the same URL point inside that group as shown below

"
Route::prefix('/test')->group(function() {
    Route::get(/, [TestController::class, 'test_index']);
    Route::get(/blog, [TestController::class, 'test_create']);
    Route::get(/blog/{id}/edit, [TestController::class, 'test_edit']);
});
"

We can also use fallback routes so that when user are trying to access incorrect routes
they will always be redirected to either the home page or the dashboard or the login page
as shown below

"
Route::fallback(FallbackController::class);
"

you can also call in the function inside directly as well as shown below

"
Route::fallback('/login', function(){
    return view(login);
})
"

I chose to use the controller and inside the controller I have an invoke method 
as shown below

"
public function __invoke()
    {
        return view('welcome');
    }
"
The invoke method is a special function inside laravel which is used in single action
controllers.

You can generate an invokable controller by using the --invokable option

"
php artisan make:controller ProvisionServer --invokable
"


"Seeders"

Seeders are used to pass in correct data inside the database, the seeder file is made
when you create the migration throught the terminal and add the -s flag as seeder
the DatabaseSeeder is the main seed file that is used. The other seeder that we made will
only contain the data in an array and then it will passed in the DatabaseSeeder file inside
the run method "$this->call(TestSeeder::class);"

Next we need to loop the data and interact with the database system of laravel and for that 
we will use the Laravel Eloquent Model system instead of Query Builder as Eloquent makes it 
a bit easier to understand and write the queries using keywords like "create(), update(), delete()"
etc ...

We will be using the foreach loop as shown below

"
[
    'title' => 'Post one',
    'excerpt' => 'Summery of Post one',
    'body' => 'Body of Post one',
    'minutes_to_read' => 5,
    'image_path' => 'Empty',
    'is_published' => false,
]

foreach ($posts as $key => $value) {
    Post::create($value);
}   
"

Since we only want the values so we will only pass in the "$value" inside the create method.

Now inside the DatabaseSeeder file ----> inside the run method -----> we will call our 
"PostSeeder" by using the "this" global access keyword as shown below

"$this->call(PostSeeder::class);"


There are 2 ways to run seeders using the CLI/terminal.

1 - Running it with the migrations
"php artisan migrate --seed"

2 - Running it Seperatly
"php artisan db:seed"